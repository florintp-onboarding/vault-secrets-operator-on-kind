global:
  enabled: true
  tlsDisable: true
#
server:
  image:
    repository: "hashicorp/vault-enterprise"
    tag: "1.14.3-ent"
    # Overrides the default Image Pull Policy
    pullPolicy: IfNotPresent
#
    dataStorage:
        enabled: true
        size: 10Gi
        storageClass: standard
    auditStorage:
        enabled: true
        size: 10Gi
        storageClass: standard
#
    ports:
        containerPort: _placeholder_vault_port
        name: http
        containerPort: _placeholder_cluster_port
        name: https-internal
        containerPort: 8204
        name: http-rep
#
#  extraEnvironmentVars:
#    VAULT_ADDR: "http://127.0.0.1:_placeholder_vault_port"
#    VAULT_API_ADDR: "http://$(POD_IP):_placeholder_vault_port"
#    VAULT_CLUSTER_ADDR: "https://$(HOSTNAME).h-vault-5-internal:_placeholder_cluster_port"
#
  # Configure the Update Strategy Type for the StatefulSet
  # See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  updateStrategyType: "OnDelete"
  enabled: "-"
  enterpriseLicense:
  # The name of the Kubernetes secret that holds the enterprise license. The
  # secret must be in the same namespace that Vault is installed into.
    secretName: "vault-license"
  # The key within the Kubernetes secret that holds the enterprise license.
    secretKey: "VAULT_LICENSE"
#
  # Configure the logging verbosity for the Vault server.
  # Supported log levels include: trace, debug, info, warn, error
  logLevel: "trace"
  logFormat: "standard"
  affinity: ""
  readinessProbe:
    enabled: true
      #path: '/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204'
    path: "/v1/sys/health?standbyok=true"
    failureThreshold: 2
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
    extraEnvironmentVars:
      VAULT_ADDR: "http://127.0.0.1:_placeholder_vault_port"  
    port: _placeholder_vault_port
#
  livenessProbe:
    enabled: true
      #path: '/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204'
    path: "/v1/sys/health?standbyok=true"
    initialDelaySeconds: 60
    failureThreshold: 2
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
    extraEnvironmentVars:
      VAULT_ADDR: "http://127.0.0.1:_placeholder_vault_port"  
    port: _placeholder_vault_port
#
  service:
    enabled: true
    port: _placeholder_vault_port
    targetPort: _placeholder_vault_port
#
  ha:
    enabled: true
    replicas: 5
    raft: 
      enabled: true
      setNodeId: true
      config: |
        disable_mlock = true
        ui = true
        log_level = "trace"
        raw_storage_endpoint = true
        enable_response_header_hostname = true
        enable_response_header_raft_node_id = true
        listener "tcp" {
          tls_disable = 1
          address = "[::]:_placeholder_vault_port"
          cluster_address = "[::]:_placeholder_cluster_port"
          telemetry {
            unauthenticated_metrics_access = "true"
          }
        }
        # Enable unauthenticated metrics access (necessary for Prometheus Operator)
        telemetry {
          unauthenticated_metrics_access = "true"
          disable_hostname = true
          prometheus_retention_time = "12h"
        }
        storage "raft" {
          path = "/vault/data"
          retry_join {
          leader_api_addr = "http://vault-0.vault-internal:_placeholder_vault_port"
          }
          retry_join {
          leader_api_addr = "http://vault-1.vault-internal:_placeholder_vault_port"
          }
          retry_join {
          leader_api_addr = "http://vault-2.vault-internal:_placeholder_vault_port"
          }
          retry_join {
          leader_api_addr = "http://vault-3.vault-internal:_placeholder_vault_port"
          }
          retry_join {
          leader_api_addr = "http://vault-4.vault-internal:_placeholder_vault_port"
          }
            autopilot {
              cleanup_dead_servers = "true"
              dead_server_last_contact_threshold = "10s"
              last_contact_threshold = 3000
              last_contact_failure_threshold = "10m"
              max_trailing_logs = 250000
              min_quorum = 0
              server_stabilization_time = "60s"
            }
        }
        service_registration "kubernetes" {}
        ## Enables a headless service to be used by the Vault Statefulset
        #    service:
        #      enabled: true
        #      # clusterIP controls whether a Cluster IP address is attached to the
        #      # Vault service within Kubernetes.  By default the Vault service will
        #      # be given a Cluster IP address, set to None to disable.  When disabled
        #      # Kubernetes will create a "headless" service.  Headless services can be
        #      # used to communicate with pods directly through DNS instead of a round robin
        #      #load balancer.
        #      # clusterIP: None
        #  
        #      # Configures the service type for the main Vault service.  Can be ClusterIP
        #      # or NodePort.
        #      #type: ClusterIP
        #  
        #      # The externalTrafficPolicy can be set to either Cluster or Local
        #      # and is only valid for LoadBalancer and NodePort service types.
        #      # The default value is Cluster.
        #      # ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-traffic-policy
        #      externalTrafficPolicy: Cluster
        #  
        #      # If type is set to "NodePort", a specific nodePort value can be configured,
        #      # will be random if left blank.
        #      #nodePort: 30000
        #  
        #      # Port on which Vault server is listening
        #      port: _placeholder_vault_port
        #      # Target port to which the service should be mapped to
        #      targetPort: _placeholder_vault_port
        #      # Extra annotations for the service definition. This can either be YAML or a
        #      # YAML-formatted multi-line templated string map of the annotations to apply
        #      # to the service.
        #      annotations: {}
        ##
ui:
  enabled: true
  serviceType: "LoadBalancer"
  serviceNodePort: null
  externalPort: _placeholder_vault_port
  targetPort: _placeholder_vault_port
  externalTrafficPolicy: "Cluster"
  activeVaultPodOnly: true
  externalPort: _placeholder_vault_port

